void translate_scale_matrix(void);
void matrix_vector_sample(void);

void matrix_vector_sample(void)
{
	t_vec		a;
	t_vec		b;
	t_matrix	m;
	t_matrix	m2;
	t_matrix	m3;
	int			i;
	int			j;

	matrix_create(&m, FILL);
	matrix_create(&m2, FILL);
	matrix_create(&m3, NO_FILL);

	matrix_rotate(&m, 90, Y_AXE);
	matrix_rotate(&m2, 45, X_AXE);

	matrix_print(&m, WOLFRAM);
	matrix_print(&m2, WOLFRAM);
	printf("===============================================================\n");

	matrix_mult(&m, &m2, &m3);
	matrix_print(&m, TERM);
	printf("\n");
	matrix_print(&m2, TERM);
	printf("\n");
	matrix_print(&m3, TERM);
	printf("\n");
	matrix_print(&m3, WOLFRAM);
	printf("===============================================================\n");

	i = 0;
	while (i < 1920)
	{
		j = 0;
		while (j < 1080)
		{
			vector_init(&a, i, j, i + j);
			printf("vec\t");
			vector_print(&a, WOLFRAM);
			vector_matrix_mult(&a, &m3, &b);
			printf("solved\t");
			vector_print(&b, WOLFRAM);
			j = j + 1;
		}
		i = i + 1;
	}
}

void matrix_rotation_sample(void)
{
	t_matrix	m;
	t_matrix	m2;
	t_matrix	m3;
	t_vec		a;
	t_vec		b;
	t_vec		c;
	t_vec		row;

	matrix_create(&m, FILL);
	matrix_create(&m2, FILL);
	matrix_create(&m3, FILL);
	matrix_print(&m, WOLFRAM);
	printf("\n");
	matrix_print(&m2, WOLFRAM);
	printf("===============================================================\n");
	vector_init(&a, 2, 4, 2);
	vector_init(&b, 2, 6, 2);
	vector_init(&c, 2, 8, 2);
	vector_print(&a, WOLFRAM);
	vector_print(&b, WOLFRAM);
	vector_print(&c, WOLFRAM);
	printf("===============================================================\n");
	matrix_rotate(&m, 90, X_AXE); //ok
	matrix_print(&m, TERM);
	matrix_print(&m, WOLFRAM);
	vector_matrix_mult(&a, &m, &a);
	vector_print(&a, WOLFRAM);
	printf("===============================================================\n");
	matrix_rotate(&m2, 90, Y_AXE); //faux
	matrix_print(&m2, TERM);
	vector_print(&b, WOLFRAM);
	matrix_print(&m2, WOLFRAM);
	vector_matrix_mult(&b, &m2, &b);
	vector_print(&b, WOLFRAM);
	printf("===============================================================\n");
	matrix_rotate(&m3, 90, Z_AXE);
	matrix_print(&m3, TERM);
	vector_print(&c, WOLFRAM);
	matrix_print(&m3, WOLFRAM);
	vector_matrix_mult(&c, &m3, &c);
	vector_print(&c, WOLFRAM);
	printf("===============================================================\n");
	vector_init(&row, m.data[2][0], m.data[2][1], m.data[2][2]);
	vector_print(&row, TERM);
}

void translate_scale_matrix(void)
{
	t_matrix	m;
	t_matrix	m2;
	t_vec		a;
	t_vec		b;
	t_vec		scaling_vector;
	t_vec		translate_vector;

	matrix_create(&m, FILL);
	matrix_print(&m, WOLFRAM);
	matrix_create(&m2, FILL);
	matrix_print(&m2, WOLFRAM);
	printf("===============================================================\n");
	vector_init(&a, 0, 5, 10);
	vector_initv(&b, &a);
	vector_init(&scaling_vector, 2, 3, 4);
	vector_init(&translate_vector, 10, 10, 10);
	vector_print(&a, WOLFRAM);
	vector_print(&b, WOLFRAM);
	printf("===============================================================\n");
	matrix_scaling(&m, &scaling_vector);
	matrix_print(&m, WOLFRAM);
	vector_matrix_mult(&a, &m, &a);
	vector_print(&a, WOLFRAM);
	printf("===============================================================\n");
	matrix_create(&m2, FILL);
	matrix_translate(&m2, &translate_vector);
	matrix_print(&m2, WOLFRAM);
	vector_matrix_mult(&a, &m2, &a);
	vector_print(&a, WOLFRAM);
	printf("===============================================================\n");
	matrix_mult(&m2, &m, &m);
	matrix_print(&m, WOLFRAM);
	vector_matrix_mult(&b, &m, &b);
	vector_print(&b, WOLFRAM);
	printf("===============================================================\n");

}
